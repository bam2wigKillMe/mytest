#THis file includes the installation of brake and its perl dependencies, components, software dependencies and the running of the test*.sh in braker/example/tests/
#
#######################################################################################################################################
#For braker's perl dependencies: as the braker'README, install with conda, just copy the commands
#######################################################################################################################################

conda create -n braker
conda install -c anaconda perl
conda install -c bioconda perl-app-cpanminus
conda install -c bioconda perl-hash-merge
conda install -c bioconda perl-parallel-forkmanager
conda install -c bioconda perl-scalar-util-numeric
conda install -c bioconda perl-yaml
conda install -c bioconda perl-class-data-inheritable
conda install -c bioconda perl-exception-class
conda install -c bioconda perl-test-pod
conda install -c anaconda biopython
conda install -c bioconda perl-file-homedir
conda install -c bioconda perl-file-which # skip if you are not comparing to reference annotation
conda install -c bioconda perl-mce	# if with ProtHint
conda install -c bioconda perl-threaded # if with ProtHint
cpanm Logger::Simple

#But later I found that it seems to miss the List::Util, so I used conda to install it mannually
conda install -c bioconda perl-list-util


#######################################################################################################################################
#For braker's components: braker's scripts.pl, this is supposed to be in /braker/scripts/
#######################################################################################################################################

#Just check if they are executable, if not, just use chmod to make they do.
#ADD this line to ~/.bashrc " export PATH=/your_path_to_braker/:$PATH"


#######################################################################################################################################
#For braker's software dependencies: GeneMark-EX, AUGUSTUS and so on.
#######################################################################################################################################
#
##########################################################################################################################
#1.For GeneMark-EX
##########################################################################################################################

Download GeneMark-EX from http://exon.gatech.edu/GeneMark/license_download.cgi, and do as it's README says.
#ATTENTION: when you download software, you need to download the gm_key_64.gz !!!!At the same time!!!
#This is important! Otherwise, you can't run gm at all!!!
#And you have to reinstall GeneMark-EX in 200 days, cause its gm_key will expire in that time.

#NOTE: if you install braker's dependencies as this file, you are ready to move on

#Default path to Perl can be changed by script "change_path_in_perl_scripts.pl"
./change_path_in_perl_scripts.pl "/PATH_to_your_perl/ perl"

#To check completeness of installation, run script 
./check_install.bash

#To verify that the entire software is working correctly,
#run a test example in GeneMark-E-tests folder.

#I just list one of test of ES, for ET and EP and ETP, see README in GeneMark
#To test GeneMark-ES, get in example folder
#   gmes_petap.pl --sequence sequence.fna --ES
#   gmes_petap.pl --sequence sequence.fna --ES --fungus

#For braker to find it, add gmes_petap.pl to $PATH
echo "export PATH=/PATH_to_GM/gmes_petap.pl:$PATH" >> ~/.bashrc
#Alternatively
echo "export GENEMARK_PATH=/your_path_to_GeneMark-ET/gmes_petap/" >> ~/.bashrc

gunzip gm_key_64.gz
mv gm_key_64 ~/.gm_key
#
##########################################################################################################################
#For AUGUSTUS: the hardest one of all time
##########################################################################################################################
#
#ATTENTION: do not use conda to install AUGUSTUS, cause braker relies heavily on newest AUGUSTUS's scripts.
#And I did try with conda, And it failed with test*.sh in /braker/example.
#So don't be LAZY, like me...

#First download AUGUSTUS, even this can be a trap
#Download the newest by git or wget master version, DO NOT DOWNLOAD ITS RELEASE VERSION, which I did and failed again......
git clone https://github.com/Gaius-Augustus/Augustus.git
#Or
wget https://github.com/Gaius-Augustus/Augustus/archive/master.zip

##############################################################################################
#For AUGUSTUS's dependencies, I just copy from AUGUSTUS's README
##############################################################################################
#The url to install these lib I didn't record, so got google yourself
#
#This one isn't probably useful, you may just set ZIPINPUT = false in common.mk, I installed in case needed.
#For gzip compressed input: (set ZIPINPUT = false in common.mk if this feature is not required or the required libraries are not available)
libboost-iostreams-dev
zlib1g-dev

#This one isn't probably useful, either, you may just set COMPGENEPRED = false in common.mk, I installed in case needed.
#For comparative AUGUSTUS (multi-species, CGP): (set COMPGENEPRED = false in common.mk if the libraries required by the CGP version are not available. Augustus can then only be run in single-genome mode, which is what most users need.)
libgsl-dev
libboost-all-dev
libsuitesparse-dev
liblpsolve55-dev
libsqlite3-dev (add SQLITE = false to common.mk if this feature is not required or the required library is not available) #I didn't get it, so I set false
libmysql++-dev (add MYSQL = false to common.mk if this feature is not required or the required library is not available) #I didn't get it, so I set false

#These are obligatory.
#For compiling bam2hints and filterBam:
libbamtools-dev
#For compiling utrrnaseq:
libboost-all-dev (version must be >Boost_1_49_0)

#This is not needed at all! But I tried for hours and failed......
#You can just use bamToWig.py to do the same work.
#For compiling bam2wig:
#Follow these instructions. Note that it shouldn't be a problem to compile AUGUSTUS without bam2wig. In practice, you can simply use bamToWig.py to accomplish the same task.

#I installed it but maybe it's ok without it
#For compiling homgenemapping (set BOOST = FALSE in ./auxprogs/homgenemapping/src/Makefile if the option --printHomologs is not required or the required libraries are not available)
libboost-all-dev


##############################################################################################
#For compilation of AUGUSTUS: you need to change several MakeFile
##############################################################################################
#
#I followed one instructions from 
https://xieduo7.github.io/2018-06-25-基因预测软件中的奥古斯都-Augustus的安装.html
#But maybe something is wrong here, and I did some changes to MakeFile according to ERRORS, something like change the $INCLUDE
#If something is wrong, just do some changes to MakeFile like the url above. If still got in trouble, you can issue an question on github
#
#When I tried to do "make" like the others, my bam2wig always crush, so I just commented out the "cd bam2wig;make" and "cd bam2wig; clean" in braker/MakeFile
#Finally, the "make" finished, and make install , and you can type "make test" to check.
#
#And you can add AUGUSTUS_CONFIG_PATH=/path/augustus/config to ~/.bashrc
#
#
###########################################################################################################################
#For Bamtools: I did almost as the braker's README, so just copy it to here
###########################################################################################################################
#
git clone https://github.com/pezmaster31/bamtools.git
cd /your-bamtools-directory/; mkdir build; cd build; cmake ..; make

echo "export BAMTOOLS_PATH=/your_path_to_bamtools/bin/" >>~/.bashrc
echo "export PATH=$PATH:/your_path_to_bamtools/bin/" >>~/.bashrc


###########################################################################################################################
#For diamond, just download and unpack, add path to ~/.bashrc
###########################################################################################################################

wget http://github.com/bbuchfink/diamond/releases/download/v0.9.24/diamond-linux64.tar.gz
tar xzf diamond-linux64.tar.gz
echo "export DIAMOND_PATH=/your_path_to_diamond/" >>~/.bashrc
#Or PATH

###########################################################################################################################
#For ProtHint, its requirement is fulfilled by GeneMark-EX
###########################################################################################################################

git clone https://github.com/gatech-genemark/ProtHint.git
echo "export ALIGNMENT_TOOL_PATH=/your_path_to_ProtHint/bin/" >>~/.bashrc

###########################################################################################################################
#For other software, it's all optional, and just follow README.
#But exception for GenomeThreader, if you need this one, you have to talk with root user,
#Because it needs glibc-2.27, but system only got 2.17.
#And GenomeThreader only gives out bin, so can't change its source
###########################################################################################################################




###############################################################################################################################################
#Now test braker with example/tests/test*.sh, good luck!
###############################################################################################################################################

